create database sqlproject;
use sqlproject;
-- 1. Supplier Table
CREATE TABLE IF NOT EXISTS supplier (
    sup_id TINYINT PRIMARY KEY,
    sup_name VARCHAR(255),
    address TEXT
);
-- 2. Categories Table
CREATE TABLE IF NOT EXISTS categories (
    cat_id TINYINT PRIMARY KEY,
    cat_name VARCHAR(255)
);
-- 3. Employees Table
CREATE TABLE IF NOT EXISTS employees (
    emp_id TINYINT PRIMARY KEY,
    emp_name VARCHAR(255),
    hire_date VARCHAR(255)
);
-- 4. Customers Table
CREATE TABLE IF NOT EXISTS customers (
    cust_id SMALLINT PRIMARY KEY,
    cust_name VARCHAR(255),
    address TEXT
);
-- 5. Products Table
CREATE TABLE IF NOT EXISTS products (
    prod_id TINYINT PRIMARY KEY,
    prod_name VARCHAR(255),
    sup_id TINYINT,
    cat_id TINYINT,
    price DECIMAL(10,2),
    FOREIGN KEY (sup_id) REFERENCES supplier(sup_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (cat_id) REFERENCES categories(cat_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);
-- 6. Orders Table
CREATE TABLE IF NOT EXISTS orders (
    ord_id SMALLINT PRIMARY KEY,
    cust_id SMALLINT,
    emp_id TINYINT,
    order_date VARCHAR(255),
    FOREIGN KEY (cust_id) REFERENCES customers(cust_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (emp_id) REFERENCES employees(emp_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);
-- 7. Order_Details Table
CREATE TABLE IF NOT EXISTS order_details (
    ord_detID SMALLINT AUTO_INCREMENT PRIMARY KEY,
    ord_id SMALLINT,
    prod_id TINYINT,
    quantity TINYINT,
    each_price DECIMAL(10,2),
    total_price DECIMAL(10,2),
    FOREIGN KEY (ord_id) REFERENCES orders(ord_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (prod_id) REFERENCES products(prod_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 1. Customer Insights
-- 1a. How many unique customers have placed orders?
select count(distinct cust_id) 
from orders;

-- 1b. Which customers have placed the highest number of orders?
select cust_id, 
	   count(*) as total_orders 
from orders 
group by cust_id 
order by total_orders desc 
limit 5;

-- 1c. What is the total and average purchase value per customer?
select o.cust_id, 
       c.cust_name,
       sum(od.total_price) as total_orders_price, 
       avg(od.total_price) as average_orders_price 
from orders o join order_details od 
on o.ord_id = od.ord_id join customers c 
on o.cust_id = c.cust_id
group by o.cust_id
order by total_orders_price desc;

-- 1d. Who are the top 5 customers by total purchase amount?
select o.cust_id, 
       c.cust_name,  
       sum(od.total_price) as total_orders_price
from orders o join order_details od 
on o.ord_id = od.ord_id join customers c 
on o.cust_id = c.cust_id
group by o.cust_id
order by total_orders_price desc
limit 5;

-- 2. Product Performance
-- 2a. How many products exist in each category?
select c.cat_id, 
       c.cat_name, 
       count(*) as number_of_products 
from products p join categories c 
on p.cat_id = c.cat_id 
group by p.cat_id 
order by number_of_products desc;

-- 2b. What is the average price of products by category?
select c.cat_id, 
       c.cat_name,
       avg(p.price) as average_product_price 
from products p join categories c 
on p.cat_id = c.cat_id 
group by p.cat_id 
order by average_product_price desc;

-- 2c. Which products have the highest total sales volume (by quantity)?
select od.prod_id, 
	   p.prod_name, 
       sum(od.quantity) as product_quantity 
from order_details od join products p 
on od.prod_id = p.prod_id 
group by od.prod_id 
order by product_quantity desc;

-- 2d. What is the total revenue generated by each product?
select od.prod_id, 
       p.prod_name, 
       sum(od.total_price) as products_total_cost 
from order_details od join products p 
on od.prod_id = p.prod_id 
group by od.prod_id 
order by products_total_cost desc;

-- 2e. How do product sales vary by category and supplier?
select c.cat_name, 
       s.sup_name,  
       sum(od.total_price) as total_orders_price
from order_details od join products p 
on od.prod_id = p.prod_id join categories c 
on p.cat_id = c.cat_id join supplier s 
on p.sup_id = s.sup_id
group by c.cat_name, s.sup_name
order by total_orders_price desc; 

-- 3. Sales and Order Trends
-- 3a. How many orders have been placed in total?
select count(*) 
from orders_details;

-- 3b. What is the average value per order?
select od.ord_id, 
       avg(od.total_price) as average_orders_price
from orders o join order_details od 
on o.ord_id = od.ord_id 
group by od.ord_id 
order by average_orders_price DESC;

-- *** challenge *** 
-- method to change format and to change datatype 
UPDATE orders SET order_date = STR_TO_DATE(order_date, '%Y-%m-%d');
ALTER TABLE orders MODIFY COLUMN order_date DATETIME;

-- 3c. On which dates were the most orders placed?
select date(order_date) as ordered_date, 
       count(*) as orders_count 
from orders 
group by ordered_date
order by orders_count desc
limit 8;

-- 3d. What are the monthly trends in order volume and revenue?
select month(o.order_date) as order_month, 
       count(*) as total_orders_count, 
       sum(od.quantity) as total_orders_quantity, 
       sum(od.total_price) as total_orders_price
from order_details od join orders o 
on od.ord_id = o.ord_id
group by month(o.order_date)
order by total_orders_price desc;

-- 3e. How do order patterns vary across weekdays and months?
select monthname(o.order_date) as order_month, 
       dayname(o.order_date) as order_weekday, 
       count(*) as total_orders_count, 
       sum(od.quantity) as total_orders_quantity, 
       sum(od.total_price) as total_orders_price
from order_details od join orders o 
on od.ord_id = o.ord_id
group by monthname(o.order_date), dayname(o.order_date)
order by monthname(o.order_date) asc, dayname(o.order_date) asc;

-- 4. Supplier Contribution
-- 4a. How many suppliers are there in the database?
select * 
from supplier;

-- 4b. Which supplier provides the most products?
select p.sup_id, 
       s.sup_name, 
       count(*) as total_products_count
from products p join supplier s 
on p.sup_id = s.sup_id 
group by s.sup_id 
order by total_products_count desc;

-- 4c. What is the average price of products from each supplier?
select p.sup_id, 
       s.sup_name, 
       avg(p.price) as average_price_supplier
from products p join supplier s 
on p.sup_id = s.sup_id 
group by s.sup_id
order by average_price_supplier desc;

-- 4d. Which suppliers contribute the most to total product sales (by revenue)?
select p.sup_id, 
       s.sup_name,  
       sum(price) as total_Products_price
from products p join supplier s 
on p.sup_id = s.sup_id 
group by s.sup_id 
order by total_products_price desc;

-- 5. Employee Performance
-- 5a. How many employees have processed orders
select count(distinct emp_id) as employees_processed_orders
from orders;

-- 5b. Which employees have handled the most orders?
select o.emp_id, 
       e.emp_name, 
       count(*) as orders_count 
from orders o join employees e 
on o.emp_id = e.emp_id 
group by o.emp_id 
order by orders_count desc;

-- 5c. What is the total sales value processed by each employee?
select o.emp_id, 
       e.emp_name,
       sum(od.total_price) as total_sales 
from order_details od join orders o 
on od.ord_id = o.ord_id join employees e 
on o.emp_id = e.emp_id 
group by o.emp_id 
order by total_sales desc;

-- 5d. What is the average order value handled per employee? 
select e.emp_id, 
       e.emp_name,
       avg(total_price) as average_price 
from order_details od left join orders o 
on od.ord_id = o.ord_id join employees e 
on o.emp_id = e.emp_id
group by o.emp_id;

-- Order Details Deep Dive
-- 6a. What is the relationship between quantity ordered and total price?
select quantity,
       sum(total_price) as total_quantity_price
from order_details 
group by quantity
order by total_quantity_price asc, quantity asc;

-- 6b. What is the average quantity ordered per product?
select p.prod_name, 
       od.prod_id,
       avg(od.quantity) 
from order_details od join products p 
on od.prod_id = p.prod_id 
group by prod_id;

-- 6c. How does the unit price vary across products and orders?
select ord_id,
       prod_id
	   each_price
from order_details 
order by prod_id asc, ord_id asc;






